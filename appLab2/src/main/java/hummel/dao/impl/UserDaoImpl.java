package hummel.dao.impl;

import hummel.ConnectionPool;
import hummel.bean.Order;
import hummel.bean.Role;
import hummel.bean.User;
import hummel.bean.container.Cart;
import hummel.bean.container.Page;
import hummel.dao.UserDao;
import hummel.exception.ConnectionException;
import hummel.factory.DaoFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static hummel.utils.Constants.UNKNOWN;

public class UserDaoImpl implements UserDao {
	private static final ConnectionPool POOL = ConnectionPool.getInstance();

	private static final String INSERT_ORDER = "INSERT INTO orders (userId, date, price) VALUES (?, ?, ?)";
	private static final String INSERT_ORDER_BOOKS = "INSERT INTO orders_books (orderId, bookId) VALUES (?, ?)";
	private static final String INSERT_USER = "INSERT INTO users (name, lastName, email, birthDate, registrationDate, balance, password, address, phoneNumber) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

	private static final String SELECT_BALANCE = "SELECT balance FROM users WHERE id = ?";
	private static final String SELECT_BAN_STATUS = "SELECT banned FROM users WHERE id = ?";
	private static final String SELECT_BOOKS_QUANTITY = "SELECT count(*) FROM orders_books JOIN orders ON orderId = orders.id WHERE userId = ?";
	private static final String SELECT_FAVOURITE_AUTHOR = "SELECT author FROM (SELECT author, count(*) as count FROM orders_books JOIN books ON bookId = books.id JOIN orders ON orderId = orders.id WHERE userId = ? GROUP BY author) as res1 ORDER BY count DESC LIMIT 1";
	private static final String SELECT_ORDERS = "SELECT * FROM orders WHERE orders.userId = ? LIMIT ?, ?";
	private static final String SELECT_ORDERS_QUANTITY = "SELECT count(*) FROM orders WHERE userId = ?";
	private static final String SELECT_ROLES = "SELECT roles.id, roles.name FROM roles JOIN users_roles ON roles.id = users_roles.roleId WHERE users_roles.userId = ?";
	private static final String SELECT_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?";
	private static final String SELECT_USER_BY_EMAIL_PASSWORD = "SELECT * FROM users WHERE email = ? AND password = ?";

	private static final String UPDATE_ADDRESS_PHONE = "UPDATE users SET address = ?, phoneNumber = ? WHERE id = ?";
	private static final String UPDATE_BALANCE = "UPDATE users SET balance = ? WHERE id = ?";
	private static final String UPDATE_BAN_STATUS = "UPDATE users SET banned = ? WHERE id = ?";

	public static User createUserByInfo(ResultSet set) throws SQLException {
		return User.builder().id(set.getInt("id")).name(set.getString("name")).lastName(set.getString("lastName")).email(set.getString("email")).birthDate(set.getDate("birthDate").toLocalDate()).registrationDate(set.getDate("registrationDate").toLocalDate()).balance(set.getDouble("balance")).password(set.getString("password")).address(set.getString("address")).phoneNumber(set.getString("phoneNumber")).orders(new ArrayList<>()).roles(new ArrayList<>()).build();
	}

	@Override
	public Order addOrder(Cart cart, int userId) throws ConnectionException, SQLException {
		var order = Order.builder().userId(userId).price(cart.getSummaryPrice()).books(new ArrayList<>(cart.getBooks())).build();
		var connection = POOL.getConnection();
		var orderId = 0;
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(INSERT_ORDER, Statement.RETURN_GENERATED_KEYS);
			connection.setAutoCommit(false);
			statement.setInt(1, userId);
			var now = new Timestamp(System.currentTimeMillis());
			order.setDate(now.toLocalDateTime().toLocalDate());
			statement.setTimestamp(2, now);
			statement.setDouble(3, cart.getSummaryPrice());
			statement.execute();
			var autoGenerated = statement.getGeneratedKeys();
			if (autoGenerated.next()) {
				orderId = autoGenerated.getInt(1);
				order.setId(orderId);
			}
		} catch (SQLException e) {
			POOL.returnConnection(connection);
			connection.setAutoCommit(true);
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statement = null;
		try {
			statement = connection.prepareStatement(INSERT_ORDER_BOOKS);
			for (var book : cart.getBooks()) {
				statement.setInt(1, orderId);
				statement.setInt(2, book.getId());
				statement.execute();
			}
		} catch (SQLException e) {
			POOL.returnConnection(connection);
			connection.setAutoCommit(true);
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		statement = null;
		try {
			statement = connection.prepareStatement(UPDATE_BALANCE);
			statement.setDouble(1, getBalance(userId) - cart.getSummaryPrice());
			statement.setInt(2, userId);
			statement.execute();
		} catch (SQLException e) {
			POOL.returnConnection(connection);
			connection.setAutoCommit(true);
			throw new SQLException(e.getMessage());
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		connection.commit();
		POOL.returnConnection(connection);
		connection.setAutoCommit(true);
		return order;
	}

	@Override
	public void addUser(User user) throws SQLException, ConnectionException {
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(INSERT_USER, Statement.RETURN_GENERATED_KEYS);
			statement.setString(1, user.getName());
			statement.setString(2, user.getLastName());
			statement.setString(3, user.getEmail());
			statement.setDate(4, Date.valueOf(user.getBirthDate()));
			statement.setDate(5, Date.valueOf(user.getRegistrationDate()));
			statement.setDouble(6, user.getBalance());
			statement.setString(7, user.getPassword());
			statement.setString(8, user.getAddress());
			statement.setString(9, user.getPhoneNumber());
			statement.execute();
			var autoGenerated = statement.getGeneratedKeys();
			if (autoGenerated.next()) {
				user.setId(autoGenerated.getInt(1));
			}
			autoGenerated.close();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	private void restoreUserInfo(User user) throws ConnectionException, SQLException {
		if (user != null) {
			user.setOrders(getOrders(user.getId(), new Page(0, 999)));
			user.setRoles(getRoles(user.getId()));
			user.setBanned(getBanStatus(user.getId()));
			user.setFavouriteAuthor(getFavouriteAuthor(user.getId()));
			user.setBooksQuantity(getBooksQuantity(user.getId()));
			user.setOrdersQuantity(getOrdersQuantity(user.getId()));
		}
	}

	@Override
	public double getBalance(int userId) throws ConnectionException, SQLException {
		var result = -1.0;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_BALANCE);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			if (set.next()) {
				result = set.getDouble(1);
			}
			set.close();
			return result;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public int getBanStatus(int userId) throws ConnectionException, SQLException {
		var result = 0;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_BAN_STATUS);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			if (set.next()) {
				result = set.getInt(1);
			}
			set.close();
			return result;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public int getBooksQuantity(int userId) throws ConnectionException, SQLException {
		var result = 0;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_BOOKS_QUANTITY);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			if (set.next()) {
				result = set.getInt(1);
			}
			set.close();
			return result;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public String getFavouriteAuthor(int userId) throws ConnectionException, SQLException {
		var result = UNKNOWN;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_FAVOURITE_AUTHOR);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			if (set.next()) {
				result = set.getString(1);
			}
			set.close();
			return result;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public List<Order> getOrders(int userId, Page params) throws ConnectionException, SQLException {
		List<Order> result = new ArrayList<>();
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		var daoFactory = DaoFactory.INSTANCE;
		var bookDao = daoFactory.getBookDao();
		try {
			statement = connection.prepareStatement(SELECT_ORDERS);
			var startPosition = params.getPageNumber() * params.getPageSize();
			statement.setInt(1, userId);
			statement.setInt(2, startPosition);
			statement.setInt(3, params.getPageSize());
			var set = statement.executeQuery();
			while (set.next()) {
				result.add(Order.builder().id(set.getInt("orders.id")).date(set.getDate("date").toLocalDate()).userId(set.getInt("userId")).price(set.getDouble("price")).books(bookDao.getBooksByOrder(set.getInt("orders.id"))).build());
			}
			set.close();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
		return result;
	}

	@Override
	public int getOrdersQuantity(int userId) throws ConnectionException, SQLException {
		var result = 0;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_ORDERS_QUANTITY);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			if (set.next()) {
				result = set.getInt(1);
			}
			set.close();
			return result;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public List<Role> getRoles(int userId) throws ConnectionException, SQLException {
		List<Role> result = new ArrayList<>();
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_ROLES);
			statement.setInt(1, userId);
			var set = statement.executeQuery();
			while (set.next()) {
				result.add(Role.builder().id(set.getInt("id")).name(set.getString("name")).build());
			}
			set.close();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
		return result;
	}

	@Override
	public User getUserByEmail(String email) throws ConnectionException, SQLException {
		User user = null;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_USER_BY_EMAIL);
			statement.setString(1, email);
			var set = statement.executeQuery();
			if (set.next()) {
				user = createUserByInfo(set);
			}
			set.close();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}

		restoreUserInfo(user);

		return user;
	}

	@Override
	public User getUserByEmailPassword(String email, String password) throws ConnectionException, SQLException {
		User user = null;
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_USER_BY_EMAIL_PASSWORD);
			statement.setString(1, email);
			statement.setString(2, password);
			var set = statement.executeQuery();
			if (set.next()) {
				user = createUserByInfo(set);
			}
			set.close();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}

		restoreUserInfo(user);

		return user;
	}

	@Override
	public boolean getUserExistance(String userEmail) throws ConnectionException, SQLException {
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(SELECT_USER_BY_EMAIL);
			statement.setString(1, userEmail);
			var set = statement.executeQuery();
			var isPresent = set.next();
			set.close();
			return isPresent;
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public void updateAddressPhone(String address, String phoneNumber, int userId) throws ConnectionException, SQLException {
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(UPDATE_ADDRESS_PHONE);
			statement.setString(1, address);
			statement.setString(2, phoneNumber);
			statement.setInt(3, userId);
			statement.execute();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}

	@Override
	public void updateBanStatus(int banned, int userId) throws ConnectionException, SQLException {
		var connection = POOL.getConnection();
		PreparedStatement statement = null;
		try {
			statement = connection.prepareStatement(UPDATE_BAN_STATUS);
			statement.setInt(1, banned);
			statement.setInt(2, userId);
			statement.execute();
		} finally {
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			POOL.returnConnection(connection);
		}
	}
}
